"use strict";(self.webpackChunkblog_vuepress=self.webpackChunkblog_vuepress||[]).push([[2682],{2682:(t,e,r)=>{r.d(e,{diagram:()=>Et});var a=r(4002),n=r(4318),o=r(455),i=(r(3910),r(831),r(3823),r(543),r(8795),r(1903)),c=(r(8179),r(3916)),s=(r(9227),r(7366),r(2466),r(9116),r(5054),r(7909),r(2415)),h={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},d=c.s.gitGraph,l=(0,s.a)(()=>(0,i.l)({...d,...(0,c.A)().gitGraph}),"getConfig"),m=new n.a(()=>{let t=l(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function $(){return(0,i.f)({length:7})}function g(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let n=e(a);return r[n]||(r[n]=!0,t.push(a)),t},[])}(0,s.a)($,"getID"),(0,s.a)(g,"uniqBy");var y=(0,s.a)(function(t){m.records.direction=t},"setDirection"),p=(0,s.a)(function(t){c.b.debug("options str",t),t=t?.trim(),t=t||"{}";try{m.records.options=JSON.parse(t)}catch(t){c.b.error("error while parsing gitGraph options",t.message)}},"setOptions"),x=(0,s.a)(function(){return m.records.options},"getOptions"),f=(0,s.a)(function(t){let e=t.msg,r=t.id,a=t.type,n=t.tags;c.b.info("commit",e,r,a,n),c.b.debug("Entering commit:",e,r,a,n);let o=l();r=c.M.sanitizeText(r,o),e=c.M.sanitizeText(e,o),n=n?.map(t=>c.M.sanitizeText(t,o));let i={id:r||m.records.seq+"-"+$(),message:e,seq:m.records.seq++,type:a??h.NORMAL,tags:n??[],parents:null==m.records.head?[]:[m.records.head.id],branch:m.records.currBranch};m.records.head=i,c.b.info("main branch",o.mainBranchName),m.records.commits.has(i.id)&&c.b.warn(`Commit ID ${i.id} already exists`),m.records.commits.set(i.id,i),m.records.branches.set(m.records.currBranch,i.id),c.b.debug("in pushCommit "+i.id)},"commit"),u=(0,s.a)(function(t){let e=t.name,r=t.order;if(e=c.M.sanitizeText(e,l()),m.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);m.records.branches.set(e,null!=m.records.head?m.records.head.id:null),m.records.branchConfig.set(e,{name:e,order:r}),B(e),c.b.debug("in createBranch")},"branch"),b=(0,s.a)(t=>{let e=t.branch,r=t.id,a=t.type,n=t.tags,o=l();e=c.M.sanitizeText(e,o),r&&(r=c.M.sanitizeText(r,o));let i=m.records.branches.get(m.records.currBranch),s=m.records.branches.get(e),d=i?m.records.commits.get(i):void 0,g=s?m.records.commits.get(s):void 0;if(d&&g&&d.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(m.records.currBranch===e){let t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===d||!d){let t=new Error(`Incorrect usage of "merge". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!m.records.branches.has(e)){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===g||!g){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(d===g){let t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&m.records.commits.has(r)){let t=new Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom id");throw t.hash={text:`merge ${e} ${r} ${a} ${n?.join(" ")}`,token:`merge ${e} ${r} ${a} ${n?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${n?.join(" ")}`]},t}let y=s||"",p={id:r||`${m.records.seq}-${$()}`,message:`merged branch ${e} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,y],branch:m.records.currBranch,type:h.MERGE,customType:a,customId:!!r,tags:n??[]};m.records.head=p,m.records.commits.set(p.id,p),m.records.branches.set(m.records.currBranch,p.id),c.b.debug(m.records.branches),c.b.debug("in mergeBranch")},"merge"),w=(0,s.a)(function(t){let e=t.id,r=t.targetId,a=t.tags,n=t.parent;c.b.debug("Entering cherryPick:",e,r,a);let o=l();if(e=c.M.sanitizeText(e,o),r=c.M.sanitizeText(r,o),a=a?.map(t=>c.M.sanitizeText(t,o)),n=c.M.sanitizeText(n,o),!e||!m.records.commits.has(e)){let t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=m.records.commits.get(e);if(void 0===i||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(i.parents)||!i.parents.includes(n)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let s=i.branch;if(i.type===h.MERGE&&!n)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!m.records.commits.has(r)){if(s===m.records.currBranch){let t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=m.records.branches.get(m.records.currBranch);if(void 0===t||!t){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let o=m.records.commits.get(t);if(void 0===o||!o){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let d={id:m.records.seq+"-"+$(),message:`cherry-picked ${i?.message} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,i.id],branch:m.records.currBranch,type:h.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${i.id}${i.type===h.MERGE?`|parent:${n}`:""}`]};m.records.head=d,m.records.commits.set(d.id,d),m.records.branches.set(m.records.currBranch,d.id),c.b.debug(m.records.branches),c.b.debug("in cherryPick")}},"cherryPick"),B=(0,s.a)(function(t){if(t=c.M.sanitizeText(t,l()),!m.records.branches.has(t)){let e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}{m.records.currBranch=t;let e=m.records.branches.get(m.records.currBranch);m.records.head=void 0!==e&&e?m.records.commits.get(e)??null:null}},"checkout");function E(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function k(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){r+=t===e?"\t*":"\t|"});let a=[r,e.id,e.seq];for(let t in m.records.branches)m.records.branches.get(t)===e.id&&a.push(t);if(c.b.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=m.records.commits.get(e.parents[0]);E(t,e,r),e.parents[1]&&t.push(m.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){let r=m.records.commits.get(e.parents[0]);E(t,e,r)}}k(t=g(t,t=>t.id))}(0,s.a)(E,"upsert"),(0,s.a)(k,"prettyPrintCommitHistory");var C=(0,s.a)(function(){c.b.debug(m.records.commits),k([P()[0]])},"prettyPrint"),T=(0,s.a)(function(){m.reset(),(0,c.Q)()},"clear"),L=(0,s.a)(function(){return[...m.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),M=(0,s.a)(function(){return m.records.branches},"getBranches"),v=(0,s.a)(function(){return m.records.commits},"getCommits"),P=(0,s.a)(function(){let t=[...m.records.commits.values()];return t.forEach(function(t){c.b.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),R=(0,s.a)(function(){return m.records.currBranch},"getCurrentBranch"),A=(0,s.a)(function(){return m.records.direction},"getDirection"),I=(0,s.a)(function(){return m.records.head},"getHead"),G={commitType:h,getConfig:l,setDirection:y,setOptions:p,getOptions:x,commit:f,branch:u,merge:b,cherryPick:w,checkout:B,prettyPrint:C,clear:T,getBranchesAsObjArray:L,getBranches:M,getCommits:v,getCommitsArray:P,getCurrentBranch:R,getDirection:A,getHead:I,setAccTitle:c.R,getAccTitle:c.S,getAccDescription:c.U,setAccDescription:c.T,setDiagramTitle:c.V,getDiagramTitle:c.W},O=(0,s.a)((t,e)=>{(0,a.a)(t,e),t.dir&&e.setDirection(t.dir);for(let r of t.statements)q(r,e)},"populate"),q=(0,s.a)((t,e)=>{let r={Commit:(0,s.a)(t=>e.commit(H(t)),"Commit"),Branch:(0,s.a)(t=>e.branch(z(t)),"Branch"),Merge:(0,s.a)(t=>e.merge(D(t)),"Merge"),Checkout:(0,s.a)(t=>e.checkout(S(t)),"Checkout"),CherryPicking:(0,s.a)(t=>e.cherryPick(N(t)),"CherryPicking")}[t.$type];r?r(t):c.b.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),H=(0,s.a)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?h[t.type]:h.NORMAL,tags:t.tags??void 0}),"parseCommit"),z=(0,s.a)(t=>({name:t.name,order:t.order??0}),"parseBranch"),D=(0,s.a)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?h[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),S=(0,s.a)(t=>t.branch,"parseCheckout"),N=(0,s.a)(t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),W={parse:(0,s.a)(async t=>{let e=await(0,o.a)("gitGraph",t);c.b.debug(e),O(e,G)},"parse")},j=(0,c.Y)(),_=j?.gitGraph,F=10,K=40,Y=new Map,U=new Map,V=new Map,Q=[],J=0,X="LR",Z=(0,s.a)(()=>{Y.clear(),U.clear(),V.clear(),J=0,Q=[],X="LR"},"clear"),tt=(0,s.a)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),et=(0,s.a)(t=>{let e,r,a;return"BT"===X?(r=(0,s.a)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,s.a)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let n="TB"===X||"BT"==X?U.get(t)?.y:U.get(t)?.x;void 0!==n&&r(n,a)&&(e=t,a=n)}),e},"findClosestParent"),rt=(0,s.a)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=U.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),at=(0,s.a)((t,e,r)=>{let a=r,n=r,o=[];t.forEach(t=>{let r=e.get(t);if(!r)throw new Error(`Commit not found for key ${t}`);r.parents.length?(a=ot(r),n=Math.max(a,n)):o.push(r),it(r,a)}),a=n,o.forEach(t=>{ct(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=rt(r.parents);a=U.get(t).y-K,a<=n&&(n=a);let e=Y.get(r.branch).pos,o=a-F;U.set(r.id,{x:e,y:o})}})},"setParallelBTPos"),nt=(0,s.a)(t=>{let e=et(t.parents.filter(t=>null!==t));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);let r=U.get(e)?.y;if(void 0===r)throw new Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),ot=(0,s.a)(t=>nt(t)+K,"calculateCommitPosition"),it=(0,s.a)((t,e)=>{let r=Y.get(t.branch);if(!r)throw new Error(`Branch not found for commit ${t.id}`);let a=r.pos,n=e+F;return U.set(t.id,{x:a,y:n}),{x:a,y:n}},"setCommitPosition"),ct=(0,s.a)((t,e,r)=>{let a=Y.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);let n=e+r,o=a.pos;U.set(t.id,{x:o,y:n})},"setRootPosition"),st=(0,s.a)((t,e,r,a,n,o)=>{if(o===h.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${n%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${n%8} ${a}-inner`);else if(o===h.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let i=t.append("circle");if(i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",e.type===h.MERGE?9:10),i.attr("class",`commit ${e.id} commit${n%8}`),o===h.MERGE){let o=t.append("circle");o.attr("cx",r.x),o.attr("cy",r.y),o.attr("r",6),o.attr("class",`commit ${a} ${e.id} commit${n%8}`)}o===h.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${n%8}`)}},"drawCommitBullet"),ht=(0,s.a)((t,e,r,a)=>{if(e.type!==h.CHERRY_PICK&&(e.customId&&e.type===h.MERGE||e.type!==h.MERGE)&&_?.showCommitLabel){let n=t.append("g"),o=n.insert("rect").attr("class","commit-label-bkg"),i=n.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),c=i.node()?.getBBox();if(c&&(o.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===X||"BT"===X?(o.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),i.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):i.attr("x",r.posWithOffset-c.width/2),_.rotateCommitLabel))if("TB"===X||"BT"===X)i.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),o.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(c.width+10)/25*9.5,e=10+c.width/25*8.5;n.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}},"drawCommitLabel"),dt=(0,s.a)((t,e,r,a)=>{if(e.tags.length>0){let n=0,o=0,i=0,c=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),s=t.append("circle"),h=t.append("text").attr("y",r.y-16-n).attr("class","tag-label").text(a),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");o=Math.max(o,d.width),i=Math.max(i,d.height),h.attr("x",r.posWithOffset-d.width/2),c.push({tag:h,hole:s,rect:e,yOffset:n}),n+=20}for(let{tag:t,hole:e,rect:n,yOffset:s}of c){let c=i/2,h=r.y-19.2-s;if(n.attr("class","tag-label-bkg").attr("points",`\n      ${a-o/2-2},${h+2}  \n      ${a-o/2-2},${h-2}\n      ${r.posWithOffset-o/2-4},${h-c-2}\n      ${r.posWithOffset+o/2+4},${h-c-2}\n      ${r.posWithOffset+o/2+4},${h+c+2}\n      ${r.posWithOffset-o/2-4},${h+c+2}`),e.attr("cy",h).attr("cx",a-o/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===X||"BT"===X){let i=a+s;n.attr("class","tag-label-bkg").attr("points",`\n        ${r.x},${i+2}\n        ${r.x},${i-2}\n        ${r.x+F},${i-c-2}\n        ${r.x+F+o+4},${i-c-2}\n        ${r.x+F+o+4},${i+c+2}\n        ${r.x+F},${i+c+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",i).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",i+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),lt=(0,s.a)(t=>{switch(t.customType??t.type){case h.NORMAL:return"commit-normal";case h.REVERSE:return"commit-reverse";case h.HIGHLIGHT:return"commit-highlight";case h.MERGE:return"commit-merge";case h.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),mt=(0,s.a)((t,e,r,a)=>{let n={x:0,y:0};if(!(t.parents.length>0))return"TB"===e?30:"BT"===e?(a.get(t.id)??n).y-K:0;{let r=et(t.parents);if(r){let o=a.get(r)??n;return"TB"===e?o.y+K:"BT"===e?(a.get(t.id)??n).y-K:o.x+K}}return 0},"calculatePosition"),$t=(0,s.a)((t,e,r)=>{let a="BT"===X&&r?e:e+F,n="TB"===X||"BT"===X?a:Y.get(t.branch)?.pos,o="TB"===X||"BT"===X?Y.get(t.branch)?.pos:a;if(void 0===o||void 0===n)throw new Error(`Position were undefined for commit ${t.id}`);return{x:o,y:n,posWithOffset:a}},"getCommitPosition"),gt=(0,s.a)((t,e,r)=>{if(!_)throw new Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),n=t.append("g").attr("class","commit-labels"),o="TB"===X||"BT"===X?30:0,i=[...e.keys()],c=_?.parallelCommits??!1,h=(0,s.a)((t,r)=>{let a=e.get(t)?.seq,n=e.get(r)?.seq;return void 0!==a&&void 0!==n?a-n:0},"sortKeys"),d=i.sort(h);"BT"===X&&(c&&at(d,e,o),d=d.reverse()),d.forEach(t=>{let i=e.get(t);if(!i)throw new Error(`Commit not found for key ${t}`);c&&(o=mt(i,X,o,U));let s=$t(i,o,c);if(r){let t=lt(i),e=i.customType??i.type,r=Y.get(i.branch)?.index??0;st(a,i,s,t,r,e),ht(n,i,s,o),dt(n,i,s,o)}"TB"===X||"BT"===X?U.set(i.id,{x:s.x,y:s.posWithOffset}):U.set(i.id,{x:s.posWithOffset,y:s.y}),o="BT"===X&&c?o+K:o+K+F,o>J&&(J=o)})},"drawCommits"),yt=(0,s.a)((t,e,r,a,n)=>{let o=("TB"===X||"BT"===X?r.x<a.x:r.y<a.y)?e.branch:t.branch,i=(0,s.a)(t=>t.branch===o,"isOnBranchToGetCurve"),c=(0,s.a)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...n.values()].some(t=>c(t)&&i(t))},"shouldRerouteArrow"),pt=(0,s.a)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(Q.every(t=>Math.abs(t-a)>=10))return Q.push(a),a;let n=Math.abs(t-e);return pt(t,e-n/5,r+1)},"findLane"),xt=(0,s.a)((t,e,r,a)=>{let n=U.get(e.id),o=U.get(r.id);if(void 0===n||void 0===o)throw new Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let i,c=yt(e,r,n,o,a),s="",d="",l=0,m=0,$=Y.get(r.branch)?.index;if(r.type===h.MERGE&&e.id!==r.parents[0]&&($=Y.get(e.branch)?.index),c){s="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",l=10,m=10;let t=n.y<o.y?pt(n.y,o.y):pt(o.y,n.y),r=n.x<o.x?pt(n.x,o.x):pt(o.x,n.x);"TB"===X?n.x<o.x?i=`M ${n.x} ${n.y} L ${r-l} ${n.y} ${d} ${r} ${n.y+m} L ${r} ${o.y-l} ${s} ${r+m} ${o.y} L ${o.x} ${o.y}`:($=Y.get(e.branch)?.index,i=`M ${n.x} ${n.y} L ${r+l} ${n.y} ${s} ${r} ${n.y+m} L ${r} ${o.y-l} ${d} ${r-m} ${o.y} L ${o.x} ${o.y}`):"BT"===X?n.x<o.x?i=`M ${n.x} ${n.y} L ${r-l} ${n.y} ${s} ${r} ${n.y-m} L ${r} ${o.y+l} ${d} ${r+m} ${o.y} L ${o.x} ${o.y}`:($=Y.get(e.branch)?.index,i=`M ${n.x} ${n.y} L ${r+l} ${n.y} ${d} ${r} ${n.y-m} L ${r} ${o.y+l} ${s} ${r-m} ${o.y} L ${o.x} ${o.y}`):n.y<o.y?i=`M ${n.x} ${n.y} L ${n.x} ${t-l} ${s} ${n.x+m} ${t} L ${o.x-l} ${t} ${d} ${o.x} ${t+m} L ${o.x} ${o.y}`:($=Y.get(e.branch)?.index,i=`M ${n.x} ${n.y} L ${n.x} ${t+l} ${d} ${n.x+m} ${t} L ${o.x-l} ${t} ${s} ${o.x} ${t-m} L ${o.x} ${o.y}`)}else s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,"TB"===X?(n.x<o.x&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y-l} ${s} ${n.x+m} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-l} ${n.y} ${d} ${o.x} ${n.y+m} L ${o.x} ${o.y}`),n.x>o.x&&(s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y-l} ${d} ${n.x-m} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x+l} ${n.y} ${s} ${o.x} ${n.y+m} L ${o.x} ${o.y}`),n.x===o.x&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):"BT"===X?(n.x<o.x&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y+l} ${d} ${n.x+m} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-l} ${n.y} ${s} ${o.x} ${n.y-m} L ${o.x} ${o.y}`),n.x>o.x&&(s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,m=20,i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y+l} ${s} ${n.x-m} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-l} ${n.y} ${s} ${o.x} ${n.y-m} L ${o.x} ${o.y}`),n.x===o.x&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):(n.y<o.y&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${o.x-l} ${n.y} ${d} ${o.x} ${n.y+m} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${n.x} ${o.y-l} ${s} ${n.x+m} ${o.y} L ${o.x} ${o.y}`),n.y>o.y&&(i=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${o.x-l} ${n.y} ${s} ${o.x} ${n.y-m} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${n.x} ${o.y+l} ${d} ${n.x+m} ${o.y} L ${o.x} ${o.y}`),n.y===o.y&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`));if(void 0===i)throw new Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+$%8)},"drawArrow"),ft=(0,s.a)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{xt(r,e.get(t),a,e)})})},"drawArrows"),ut=(0,s.a)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,n=Y.get(t.name)?.pos;if(void 0===n)throw new Error(`Position not found for branch ${t.name}`);let o=r.append("line");o.attr("x1",0),o.attr("y1",n),o.attr("x2",J),o.attr("y2",n),o.attr("class","branch branch"+a),"TB"===X?(o.attr("y1",30),o.attr("x1",n),o.attr("y2",J),o.attr("x2",n)):"BT"===X&&(o.attr("y1",J),o.attr("x1",n),o.attr("y2",30),o.attr("x2",n)),Q.push(n);let i=t.name,c=tt(i),s=r.insert("rect"),h=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);h.node().appendChild(c);let d=c.getBBox();s.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===_?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===_?.rotateCommitLabel?30:0))+", "+(n-d.height/2-1)+")"),"TB"===X?(s.attr("x",n-d.width/2-10).attr("y",0),h.attr("transform","translate("+(n-d.width/2-5)+", 0)")):"BT"===X?(s.attr("x",n-d.width/2-10).attr("y",J),h.attr("transform","translate("+(n-d.width/2-5)+", "+J+")")):s.attr("transform","translate(-19, "+(n-d.height/2)+")")})},"drawBranches"),bt=(0,s.a)(function(t,e,r,a,n){return Y.set(t,{pos:e,index:r}),e+(50+(n?40:0)+("TB"===X||"BT"===X?a.width/2:0))},"setBranchPosition"),wt={draw:(0,s.a)(function(t,e,r,a){if(Z(),c.b.debug("in gitgraph renderer",t+"\n","id:",e,r),!_)throw new Error("GitGraph config not found");let n=_.rotateCommitLabel??!1,o=a.db;V=o.getCommits();let s=o.getBranchesAsObjArray();X=o.getDirection();let h=(0,c.ha)(`[id="${e}"]`),d=0;s.forEach((t,e)=>{let r=tt(t.name),a=h.append("g"),o=a.insert("g").attr("class","branchLabel"),i=o.insert("g").attr("class","label branch-label");i.node()?.appendChild(r);let c=r.getBBox();d=bt(t.name,d,e,c,n),i.remove(),o.remove(),a.remove()}),gt(h,V,!1),_.showBranches&&ut(h,s),ft(h,V),gt(h,V,!0),i.m.insertTitle(h,"gitTitleText",_.titleTopMargin??0,o.getDiagramTitle()),(0,c.aa)(void 0,h,_.diagramPadding,_.useMaxWidth)},"draw")},Bt=(0,s.a)(t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,"getStyles"),Et={parser:W,db:G,renderer:wt,styles:Bt}},4002:(t,e,r)=>{function a(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}r.d(e,{a:()=>a}),(0,r(2415).a)(a,"populateCommonDb")},4318:(t,e,r)=>{r.d(e,{a:()=>n});var a=r(2415),n=class{constructor(t){this.init=t,this.records=this.init()}static{(0,a.a)(this,"ImperativeState")}reset(){this.records=this.init()}}}}]);